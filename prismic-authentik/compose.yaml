name: prismic-authentik

services:
  authentik_postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: prismic-authentik-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./volumes/database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    networks:
      - prismic-authentik

  authentik_redis:
    image: docker.io/library/redis:alpine
    container_name: prismic-authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./volumes/redis:/data
    networks:
      - prismic-authentik
  
  authentik_worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.10.1}
    container_name: prismic-authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/media:/media
      - ./volumes/certs:/certs
      - ./volumes/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - authentik_postgresql
      - authentik_redis
    networks:
      - prismic-authentik

  authentik_server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.10.1}
    container_name: prismic-authentik-server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./volumes/media:/media
      - ./volumes/custom-templates:/templates
      # - ./css/style.css:/web/dist/custom.css
    # ports:
    #   - 9001:9001
    #   - 9443:9443
    env_file:
      - .env
    depends_on:
      - authentik_postgresql
      - authentik_redis
    networks:
      - prismic-authentik
      - traefik-prismic-authentik
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-prismic-authentik"

      - "traefik.http.routers.prismic-authentik.rule=Host(`authentik.prismic.fr`)"
      - "traefik.http.routers.prismic-authentik.entrypoints=websecure"
      - "traefik.http.routers.prismic-authentik.tls=true"
      - "traefik.http.routers.prismic-authentik.tls.certresolver=letsencryptresolver"

      #- "traefik.http.services.authentik.loadbalancer.server.port=9443"
      - "traefik.http.services.prismic-authentik.loadbalancer.server.port=9000"

      - "traefik.http.middlewares.prismic-authentik.forwardAuth.address=http://authentik_server:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.prismic-authentik.forwardAuth.trustForwardHeader=true"
      - "traefik.http.middlewares.prismic-authentik.forwardAuth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"
      
  whoami:
    image: containous/whoami
    networks:
      - traefik-prismic-authentik
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-prismic-authentik"
      
      # Router configuration
      - "traefik.http.routers.whoami.rule=Host(`whoami.prismic.fr`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.tls.certresolver=letsencryptresolver"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
      
      - "traefik.http.routers.whoami.middlewares=prismic-authentik@docker"
      # - "traefik.http.routers.whoami.middlewares=prismic-authentik-proxy@docker"
      # Middleware configuration
      # - "traefik.http.routers.whoami.middlewares=authentik-auth"
      # - "traefik.http.middlewares.authentik-auth.forwardauth.address=http://authentik_server:9000/outpost.goauthentik.io/auth/traefik"
      # - "traefik.http.middlewares.authentik-auth.forwardauth.trustForwardHeader=true"
      # - "traefik.http.middlewares.authentik-auth.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"
    restart: unless-stopped

networks:
  traefik-prismic-authentik:
    name: traefik-prismic-authentik
    external: true
  traefik:
    name: traefik
    external: true
  prismic-authentik:
    driver: bridge

volumes:
  database:
    driver: local
  redis:
    driver: local